name: "E-commerce API"
docs: |
  Collection for testing the E-commerce API endpoints. The server automatically seeds 5 sample products (Smartphone X, Running Shoes, Coffee Maker, Laptop Pro, Wireless Earbuds) on startup if no products exist in the database.

  [<img src="https://fetch.usebruno.com/button.svg" alt="Fetch in Bruno" style="width: 130px; height: 30px;" width="128" height="32">](https://fetch.usebruno.com?url=git%40bitbucket.org%3Ausebruno%2Fdemo-api-collection.git "target=_blank rel=noopener noreferrer")

environments:
  - name: "dev"
    variables:
      - name: "baseUrl"
        value: "http://localhost:3001/api"

items:
  # Create Account folder
  - type: "folder"
    name: "Create Account"
    docs: "User registration endpoints"
    items:
      - type: "http"
        name: "Register User"
        url: "{{baseUrl}}/auth/register"
        method: "POST"
        headers:
          - name: "Content-Type"
            value: "application/json"
        body:
          type: "json"
          data: |
            {
              "name": "Anoop",
              "email": "test@example.com",
              "password": "password123"
            }
        docs: "Register a new user account"

  # Login folder
  - type: "folder"
    name: "Login"
    docs: "User authentication endpoints"
    items:
      - type: "http"
        name: "User Login"
        url: "{{baseUrl}}/auth/login"
        method: "POST"
        body:
          type: "json"
          data: |
            {
              "email": "test@example.com",
              "password": "password123"
            }
        scripts:
          postResponse: 'bru.setEnvVar("accessToken", res.body.token)'
        docs: "Authenticate a user and receive a token"
        
      - type: "http"
        name: "Whoami"
        url: "{{baseUrl}}/auth/whoami"
        method: "GET"
        headers:
          - name: "Authorization"
            value: "Bearer {{accessToken}}"
        docs: "Retrieve authenticated user's profile information"

  # Products folder
  - type: "folder"
    name: "Browse Products"
    docs: "Product-related endpoints. The server automatically seeds 5 sample products on startup if no products exist."
    items:
      - type: "http"
        name: "Get All Products"
        url: "{{baseUrl}}/products"
        method: "GET"
        params:
          - name: "category"
            value: "electronics"
            type: "query"
            enabled: false
        docs: "Retrieve a list of all products, optionally filtered by category. Default seeded categories include: Electronics, Sports, and Home."
        
      - type: "http"
        name: "Get Products by Category"
        url: "{{baseUrl}}/products?category=Electronics"
        method: "GET"
        params:
          - name: "category"
            value: "Electronics"
            type: "query"
        docs: "Retrieve products filtered by category. Seeded categories include: Electronics, Sports, and Home."
        
      - type: "http"
        name: "Get Product by ID"
        url: "{{baseUrl}}/products/:productId"
        method: "GET"
        params:
          - name: "productId"
            value: "cd3ad475-0784-4a0d-9fe4-a9a17e5391d9"
            type: "path"
        docs: "Retrieve detailed information about a specific product"

  # Book Order folder
  - type: "folder"
    name: "Book Order"
    docs: "Order creation and cart management endpoints"
    items:
      - type: "http"
        name: "Add Item"
        url: "{{baseUrl}}/cart/add/item/:itemId"
        method: "POST"
        headers:
          - name: "Content-Type"
            value: "application/json"
          - name: "Authorization"
            value: "Bearer {{accessToken}}"
        params:
          - name: "itemId"
            value: "cd3ad475-0784-4a0d-9fe4-a9a17e5391d9"
            type: "path"
        body:
          type: "json"
          data: |
            { 
              "quantity": 2
            }
        docs: "Add a product to the user's shopping cart"
        
      - type: "http"
        name: "Update Item"
        url: "{{baseUrl}}/cart/item/:itemId"
        method: "PUT"
        headers:
          - name: "Content-Type"
            value: "application/json"
          - name: "Authorization"
            value: "Bearer {{accessToken}}"
        params:
          - name: "itemId"
            value: "cd3ad475-0784-4a0d-9fe4-a9a17e5391d9"
            type: "path"
        body:
          type: "json"
          data: |
            {
              "quantity": 5
            }
        docs: "Update the quantity of an item in the cart"
        
      - type: "http"
        name: "Create Order"
        url: "{{baseUrl}}/orders"
        method: "POST"
        headers:
          - name: "Content-Type"
            value: "application/json"
          - name: "Authorization"
            value: "Bearer {{accessToken}}"
        body:
          type: "json"
          data: |
            {
              "shippingAddress": "Mars"
            }
        docs: "Create a new order using the items in the user's cart"

  # Fetch Order folder
  - type: "folder"
    name: "Fetch Order"
    docs: "Order retrieval endpoints"
    items:
      - type: "http"
        name: "Get User Orders"
        url: "{{baseUrl}}/orders"
        method: "GET"
        headers:
          - name: "Authorization"
            value: "Bearer {{accessToken}}"
        docs: "Retrieve a list of all orders placed by the current user"
        
      - type: "http"
        name: "Get Order by ID"
        url: "{{baseUrl}}/orders/:orderId"
        method: "GET"
        headers:
          - name: "Authorization"
            value: "Bearer {{accessToken}}"
        params:
          - name: "orderId"
            value: "9c4d1e4f-64dd-465a-b52a-5471caab828b"
            type: "path"
        docs: "Retrieve detailed information about a specific order"
